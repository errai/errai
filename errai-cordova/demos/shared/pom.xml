<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.jboss.errai.example</groupId>
  <artifactId>errai-cordova-kitchensink</artifactId>
  <packaging>war</packaging>
  <name>Errai::Cordova::Demos::Kitchensink</name>
  <description>A starter Java EE 6 webapp project for use on JBoss AS 7 / EAP 6, generated from the jboss-javaee6-webapp
    archetype
  </description>

  <parent>
    <artifactId>errai-parent</artifactId>
    <groupId>org.jboss.errai</groupId>
    <version>3.0-SNAPSHOT</version>
    <relativePath>../../../pom.xml</relativePath>
  </parent>

  <properties>
    <!-- Define the version of JBoss' Java EE 6 APIs we want to import. Any 
      dependencies from org.jboss.spec will have their version defined by this 
      BOM -->
    <version.org.jboss.spec.jboss.javaee6>3.0.0.Final</version.org.jboss.spec.jboss.javaee6>
    <version.org.jboss.bom.errai>1.0.0.M12</version.org.jboss.bom.errai>
    <!-- Alternatively, comment out the above line, and un-comment the line 
      below to use version 3.0.0.Final-redhat-1 which is a release certified to 
      work with JBoss EAP 6. It requires you have access to the JBoss EAP 6 maven 
      repository. -->
    <!-- <version.org.jboss.spec.jboss.javaee6>3.0.0.Final-redhat-1</version.org.jboss.spec.jboss.javaee6> -->
  </properties>

  <dependencyManagement>
    <dependencies>
      <!-- JBoss distributes a complete set of Java EE 6 APIs including a 
        Bill of Materials (BOM). A BOM specifies the versions of a "stack" (or a 
        collection) of artifacts. We use this here so that we always get the correct 
        versions of artifacts. Here we use the jboss-javaee-6.0 stack (you can read 
        this as the JBoss stack of the Java EE 6 APIs). You can actually use this 
        stack with any version of JBoss AS that implements Java EE 6, not just JBoss 
        AS 7! -->
      <dependency>
        <groupId>org.jboss.spec</groupId>
        <artifactId>jboss-javaee-6.0</artifactId>
        <version>${version.org.jboss.spec.jboss.javaee6}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <dependency>
        <groupId>org.jboss.bom</groupId>
        <artifactId>jboss-javaee-6.0-with-errai</artifactId>
        <version>${version.org.jboss.bom.errai}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <!-- Errai Core and ErraiBus -->
      <dependency>
        <groupId>org.jboss.errai</groupId>
        <artifactId>errai-bus</artifactId>
        <version>${project.version}</version>
        <exclusions>
          <exclusion>
            <groupId>javax.inject</groupId>
            <artifactId>javax.inject</artifactId>
          </exclusion>
          <exclusion>
            <groupId>javax.annotation</groupId>
            <artifactId>jsr250-api</artifactId>
          </exclusion>
        </exclusions>
      </dependency>
      <dependency>
        <groupId>org.jboss.errai</groupId>
        <artifactId>errai-ioc</artifactId>
        <version>${project.version}</version>
        <exclusions>
          <exclusion>
            <groupId>javax.inject</groupId>
            <artifactId>javax.inject</artifactId>
          </exclusion>
          <exclusion>
            <groupId>javax.annotation</groupId>
            <artifactId>jsr250-api</artifactId>
          </exclusion>
        </exclusions>
      </dependency>
      <dependency>
        <groupId>org.jboss.errai</groupId>
        <artifactId>errai-tools</artifactId>
        <version>${project.version}</version>
      </dependency>

      <dependency>
        <groupId>org.jboss.errai</groupId>
        <artifactId>errai-ui</artifactId>
        <version>${project.version}</version>
      </dependency>

      <dependency>
        <groupId>org.jboss.errai</groupId>
        <artifactId>errai-data-binding</artifactId>
        <version>${project.version}</version>
      </dependency>

      <!-- Errai JAX-RS -->
      <dependency>
        <groupId>org.jboss.errai</groupId>
        <artifactId>errai-jaxrs-client</artifactId>
        <version>${project.version}</version>
      </dependency>

      <dependency>
        <groupId>org.jboss.errai</groupId>
        <artifactId>errai-jaxrs-provider</artifactId>
        <version>${project.version}</version>
      </dependency>

      <!-- Errai CDI Integration Modules -->
      <dependency>
        <groupId>org.jboss.errai</groupId>
        <artifactId>errai-cdi-client</artifactId>
        <version>${project.version}</version>
      </dependency>

      <dependency>
        <groupId>org.jboss.errai</groupId>
        <artifactId>errai-javax-enterprise</artifactId>
        <version>${project.version}</version>
      </dependency>

      <dependency>
        <groupId>org.jboss.errai</groupId>
        <artifactId>errai-weld-integration</artifactId>
        <version>${project.version}</version>
      </dependency>

      <dependency>
        <groupId>org.jboss.errai</groupId>
        <artifactId>errai-cordova</artifactId>
        <version>${project.version}</version>
      </dependency>

    </dependencies>
  </dependencyManagement>

  <dependencies>

    <!-- First declare the APIs we depend on and need for compilation. All 
      of them are provided by JBoss AS 7 -->

    <!-- Import the CDI API, we use provided scope as the API is included 
      in JBoss AS 7 -->
    <dependency>
      <groupId>javax.enterprise</groupId>
      <artifactId>cdi-api</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Import the JPA API, we use provided scope as the API is included 
      in JBoss AS 7 -->
    <dependency>
      <groupId>org.jboss.spec.javax.transaction</groupId>
      <artifactId>jboss-transaction-api_1.1_spec</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Import the Common Annotations API (JSR-250), we use provided scope 
      as the API is included in JBoss AS 7 -->
    <dependency>
      <groupId>org.jboss.spec.javax.annotation</groupId>
      <artifactId>jboss-annotations-api_1.1_spec</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Import the JAX-RS API, we use provided scope as the API is included 
      in JBoss AS 7 -->
    <dependency>
      <groupId>org.jboss.spec.javax.ws.rs</groupId>
      <artifactId>jboss-jaxrs-api_1.1_spec</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Import the JPA API, we use provided scope as the API is included 
      in JBoss AS 7 -->
    <dependency>
      <groupId>org.hibernate.javax.persistence</groupId>
      <artifactId>hibernate-jpa-2.0-api</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Import the EJB API, we use provided scope as the API is included 
      in JBoss AS 7 -->
    <dependency>
      <groupId>org.jboss.spec.javax.ejb</groupId>
      <artifactId>jboss-ejb-api_3.1_spec</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Import the Bean Validation API, which is used both on the server 
      and the client. -->
    <dependency>
      <groupId>javax.validation</groupId>
      <artifactId>validation-api</artifactId>
    </dependency>

    <!-- JSR-303 (Bean Validation) Implementation -->
    <!-- Provides portable constraints such as @Email -->
    <!-- Hibernate Validator is shipped in JBoss AS 7 -->
    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-validator</artifactId>
      <scope>provided</scope>
      <exclusions>
        <exclusion>
          <groupId>org.slf4j</groupId>
          <artifactId>slf4j-api</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <!-- GWT validation uses Hibernate Validator, and requires the sources 
      at compile time. -->
    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-validator</artifactId>
      <scope>provided</scope>
      <classifier>sources</classifier>
      <exclusions>
        <exclusion>
          <groupId>org.slf4j</groupId>
          <artifactId>slf4j-api</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <!-- GWT validation also requires the validation API sources at compile 
      time -->
    <dependency>
      <groupId>javax.validation</groupId>
      <artifactId>validation-api</artifactId>
      <classifier>sources</classifier>
    </dependency>

    <!-- The next set of dependencies are for Errai -->
    <dependency>
      <groupId>org.jboss.errai</groupId>
      <artifactId>errai-bus</artifactId>
      <exclusions>
        <exclusion>
          <groupId>javax.inject</groupId>
          <artifactId>javax.inject</artifactId>
        </exclusion>
        <exclusion>
          <groupId>javax.annotation</groupId>
          <artifactId>jsr250-api</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.jboss.errai</groupId>
      <artifactId>errai-ioc</artifactId>
      <exclusions>
        <exclusion>
          <groupId>javax.inject</groupId>
          <artifactId>javax.inject</artifactId>
        </exclusion>
        <exclusion>
          <groupId>javax.annotation</groupId>
          <artifactId>jsr250-api</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.jboss.errai</groupId>
      <artifactId>errai-tools</artifactId>
    </dependency>

    <!-- Errai CDI Integration Modules -->
    <dependency>
      <groupId>org.jboss.errai</groupId>
      <artifactId>errai-cdi-client</artifactId>
    </dependency>

    <dependency>
      <groupId>org.jboss.errai</groupId>
      <artifactId>errai-javax-enterprise</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.jboss.errai</groupId>
      <artifactId>errai-weld-integration</artifactId>

      <exclusions>
        <!-- errai-cdi-jetty is only required for integration testing -->
        <exclusion>
          <groupId>org.jboss.errai</groupId>
          <artifactId>errai-cdi-jetty</artifactId>
        </exclusion>

        <exclusion>
          <groupId>org.jboss.weld.servlet</groupId>
          <artifactId>weld-servlet</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>org.jboss.errai</groupId>
      <artifactId>errai-ui</artifactId>
    </dependency>

    <dependency>
      <groupId>org.jboss.errai</groupId>
      <artifactId>errai-data-binding</artifactId>
    </dependency>

    <dependency>
      <groupId>org.jboss.errai</groupId>
      <artifactId>errai-cordova</artifactId>
      <version>${project.version}</version>
    </dependency>

    <!-- gwt-user is required at runtime because we use some of the client/server 
      shared APIs such as RegExp, so scope is 'compile' rather than 'provided'. -->
    <dependency>
      <groupId>com.google.gwt</groupId>
      <artifactId>gwt-user</artifactId>
      <scope>compile</scope>
    </dependency>

    <dependency>
      <groupId>com.google.gwt</groupId>
      <artifactId>gwt-dev</artifactId>
      <scope>provided</scope>
    </dependency>
    <!-- End of Errai dependencies -->


    <!-- Now we declare any tools needed -->

    <!-- Annotation processor to generate the JPA 2.0 metamodel classes for 
      typesafe criteria queries -->
    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-jpamodelgen</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Needed for running tests (you may also use TestNG) -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>

  </dependencies>

  <build>
    <plugins>
      <!-- Compiler plugin enforces Java 1.6 compatibility and activates 
        annotation processors -->
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>1.6</source>
          <target>1.6</target>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-war-plugin</artifactId>
        <configuration>
          <failOnMissingWebXml>false</failOnMissingWebXml>

          <!-- Maven will append the version to the finalName (which is the name
            given to the generated war, and hence the context root) -->
          <warName>${project.artifactId}</warName>

          <!-- We must exclude GWT client local classes from the deployment, 
            or classpath scanners such as Hibernate and Weld get confused when the webapp 
            is bootstrapping. -->
          <packagingExcludes>**/javax/**/*.*,**/client/local/**/*.class</packagingExcludes>

          <archive>
            <manifestEntries>
              <Dependencies>org.jboss.as.naming,org.jboss.as.server,org.jboss.msc</Dependencies>
            </manifestEntries>
          </archive>
        </configuration>
      </plugin>

      <!-- GWT plugin to compile client-side java code to javascript and 
        to run GWT development mode -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>gwt-maven-plugin</artifactId>
        <configuration>
          <inplace>true</inplace>
          <logLevel>INFO</logLevel>
          <extraJvmArgs>-Xmx1g</extraJvmArgs>

          <!-- Configure GWT's development mode (formerly known as hosted 
            mode) to not start the default server (embedded jetty), but to download the 
            HTML host page from the configured runTarget. -->
          <noServer>true</noServer>
          <runTarget>http://localhost:8080/errai-cordova-kitchensink/</runTarget>

        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>resources</goal>
              <goal>compile</goal>
            </goals>
          </execution>
          <execution>
            <id>gwt-clean</id>
            <phase>clean</phase>
            <goals>
              <goal>clean</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- The JBoss AS plugin deploys your war to a local JBoss AS container -->
      <!-- To use, run: mvn package jboss-as:deploy -->
      <plugin>
        <groupId>org.jboss.as.plugins</groupId>
        <artifactId>jboss-as-maven-plugin</artifactId>
        <configuration>
          <filename>${project.artifactId}.${project.packaging}</filename>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-clean-plugin</artifactId>
        <configuration>
          <filesets>
            <fileset>
              <directory>${basedir}</directory>
              <includes>
                <include>www-test/**</include>
                <include>.gwt/**</include>
                <include>.errai/**</include>
                <include>src/main/webapp/KitchenSink/**</include>
                <include>src/main/webapp/WEB-INF/deploy/**</include>
                <include>src/main/webapp/WEB-INF/lib/**</include>
                <include>**/gwt-unitCache/**</include>
                <include>**/*.JUnit/**</include>
              </includes>
            </fileset>
          </filesets>
        </configuration>
      </plugin>

      <!-- We do not want to deploy the .war files for demos to Maven Central. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-deploy-plugin</artifactId>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <!-- The default profile skips all tests, though you can tune it to 
        run just unit tests based on a custom pattern -->
      <!-- Seperate profiles are provided for running all tests, including 
        Arquillian tests that execute in the specified container -->
      <id>default</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
              <skip>true</skip>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <!-- When built in OpenShift the 'openshift' profile will be used when 
        invoking mvn. -->
      <!-- Use this profile for any OpenShift specific customization your 
        app will need. -->
      <!-- By default that is to put the resulting archive into the 'deployments' 
        folder. -->
      <!-- http://maven.apache.org/guides/mini/guide-building-for-different-environments.html -->
      <id>openshift</id>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-war-plugin</artifactId>
            <configuration>
              <outputDirectory>deployments</outputDirectory>
              <warName>ROOT</warName>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

  </profiles>

</project>
